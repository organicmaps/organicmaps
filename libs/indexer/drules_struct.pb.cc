// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indexer/drules_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "indexer/drules_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class DashDotProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DashDotProto> {
} _DashDotProto_default_instance_;
class PathSymProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PathSymProto> {
} _PathSymProto_default_instance_;
class LineRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LineRuleProto> {
} _LineRuleProto_default_instance_;
class LineDefProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LineDefProto> {
} _LineDefProto_default_instance_;
class AreaRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AreaRuleProto> {
} _AreaRuleProto_default_instance_;
class SymbolRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SymbolRuleProto> {
} _SymbolRuleProto_default_instance_;
class CaptionDefProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CaptionDefProto> {
} _CaptionDefProto_default_instance_;
class CaptionRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CaptionRuleProto> {
} _CaptionRuleProto_default_instance_;
class CircleRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CircleRuleProto> {
} _CircleRuleProto_default_instance_;
class PathTextRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PathTextRuleProto> {
} _PathTextRuleProto_default_instance_;
class ShieldRuleProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShieldRuleProto> {
} _ShieldRuleProto_default_instance_;
class DrawElementProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DrawElementProto> {
} _DrawElementProto_default_instance_;
class ClassifElementProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClassifElementProto> {
} _ClassifElementProto_default_instance_;
class ColorElementProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ColorElementProto> {
} _ColorElementProto_default_instance_;
class ColorsElementProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ColorsElementProto> {
} _ColorsElementProto_default_instance_;
class ContainerProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContainerProto> {
} _ContainerProto_default_instance_;

namespace protobuf_indexer_2fdrules_5fstruct_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DashDotProto_default_instance_.Shutdown();
  _PathSymProto_default_instance_.Shutdown();
  _LineRuleProto_default_instance_.Shutdown();
  _LineDefProto_default_instance_.Shutdown();
  _AreaRuleProto_default_instance_.Shutdown();
  _SymbolRuleProto_default_instance_.Shutdown();
  _CaptionDefProto_default_instance_.Shutdown();
  _CaptionRuleProto_default_instance_.Shutdown();
  _CircleRuleProto_default_instance_.Shutdown();
  _PathTextRuleProto_default_instance_.Shutdown();
  _ShieldRuleProto_default_instance_.Shutdown();
  _DrawElementProto_default_instance_.Shutdown();
  _ClassifElementProto_default_instance_.Shutdown();
  _ColorElementProto_default_instance_.Shutdown();
  _ColorsElementProto_default_instance_.Shutdown();
  _ContainerProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DashDotProto_default_instance_.DefaultConstruct();
  _PathSymProto_default_instance_.DefaultConstruct();
  _LineRuleProto_default_instance_.DefaultConstruct();
  _LineDefProto_default_instance_.DefaultConstruct();
  _AreaRuleProto_default_instance_.DefaultConstruct();
  _SymbolRuleProto_default_instance_.DefaultConstruct();
  _CaptionDefProto_default_instance_.DefaultConstruct();
  _CaptionRuleProto_default_instance_.DefaultConstruct();
  _CircleRuleProto_default_instance_.DefaultConstruct();
  _PathTextRuleProto_default_instance_.DefaultConstruct();
  _ShieldRuleProto_default_instance_.DefaultConstruct();
  _DrawElementProto_default_instance_.DefaultConstruct();
  _ClassifElementProto_default_instance_.DefaultConstruct();
  _ColorElementProto_default_instance_.DefaultConstruct();
  _ColorsElementProto_default_instance_.DefaultConstruct();
  _ContainerProto_default_instance_.DefaultConstruct();
  _LineRuleProto_default_instance_.get_mutable()->dashdot_ = const_cast< ::DashDotProto*>(
      ::DashDotProto::internal_default_instance());
  _LineRuleProto_default_instance_.get_mutable()->pathsym_ = const_cast< ::PathSymProto*>(
      ::PathSymProto::internal_default_instance());
  _LineDefProto_default_instance_.get_mutable()->dashdot_ = const_cast< ::DashDotProto*>(
      ::DashDotProto::internal_default_instance());
  _LineDefProto_default_instance_.get_mutable()->pathsym_ = const_cast< ::PathSymProto*>(
      ::PathSymProto::internal_default_instance());
  _AreaRuleProto_default_instance_.get_mutable()->border_ = const_cast< ::LineDefProto*>(
      ::LineDefProto::internal_default_instance());
  _CaptionRuleProto_default_instance_.get_mutable()->primary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
  _CaptionRuleProto_default_instance_.get_mutable()->secondary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
  _CircleRuleProto_default_instance_.get_mutable()->border_ = const_cast< ::LineDefProto*>(
      ::LineDefProto::internal_default_instance());
  _PathTextRuleProto_default_instance_.get_mutable()->primary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
  _PathTextRuleProto_default_instance_.get_mutable()->secondary_ = const_cast< ::CaptionDefProto*>(
      ::CaptionDefProto::internal_default_instance());
  _DrawElementProto_default_instance_.get_mutable()->area_ = const_cast< ::AreaRuleProto*>(
      ::AreaRuleProto::internal_default_instance());
  _DrawElementProto_default_instance_.get_mutable()->symbol_ = const_cast< ::SymbolRuleProto*>(
      ::SymbolRuleProto::internal_default_instance());
  _DrawElementProto_default_instance_.get_mutable()->caption_ = const_cast< ::CaptionRuleProto*>(
      ::CaptionRuleProto::internal_default_instance());
  _DrawElementProto_default_instance_.get_mutable()->circle_ = const_cast< ::CircleRuleProto*>(
      ::CircleRuleProto::internal_default_instance());
  _DrawElementProto_default_instance_.get_mutable()->path_text_ = const_cast< ::PathTextRuleProto*>(
      ::PathTextRuleProto::internal_default_instance());
  _DrawElementProto_default_instance_.get_mutable()->shield_ = const_cast< ::ShieldRuleProto*>(
      ::ShieldRuleProto::internal_default_instance());
  _ContainerProto_default_instance_.get_mutable()->colors_ = const_cast< ::ColorsElementProto*>(
      ::ColorsElementProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_indexer_2fdrules_5fstruct_2eproto

bool LineJoin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool LineCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DashDotProto::kDdFieldNumber;
const int DashDotProto::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DashDotProto::DashDotProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DashDotProto)
}
DashDotProto::DashDotProto(const DashDotProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dd_(from.dd_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:DashDotProto)
}

void DashDotProto::SharedCtor() {
  offset_ = 0;
  _cached_size_ = 0;
}

DashDotProto::~DashDotProto() {
  // @@protoc_insertion_point(destructor:DashDotProto)
  SharedDtor();
}

void DashDotProto::SharedDtor() {
}

void DashDotProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DashDotProto& DashDotProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

DashDotProto* DashDotProto::New(::google::protobuf::Arena* arena) const {
  DashDotProto* n = new DashDotProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DashDotProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DashDotProto)
  dd_.Clear();
  offset_ = 0;
}

bool DashDotProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DashDotProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double dd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dd())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_dd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DashDotProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DashDotProto)
  return false;
#undef DO_
}

void DashDotProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DashDotProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double dd = 1;
  if (this->dd_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dd_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->dd().data(), this->dd_size(), output);
  }

  // double offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:DashDotProto)
}

size_t DashDotProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DashDotProto)
  size_t total_size = 0;

  // repeated double dd = 1;
  {
    unsigned int count = this->dd_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dd_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double offset = 2;
  if (this->offset() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DashDotProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DashDotProto*>(&from));
}

void DashDotProto::MergeFrom(const DashDotProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DashDotProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dd_.MergeFrom(from.dd_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void DashDotProto::CopyFrom(const DashDotProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DashDotProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashDotProto::IsInitialized() const {
  return true;
}

void DashDotProto::Swap(DashDotProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DashDotProto::InternalSwap(DashDotProto* other) {
  dd_.InternalSwap(&other->dd_);
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DashDotProto::GetTypeName() const {
  return "DashDotProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DashDotProto

// repeated double dd = 1;
int DashDotProto::dd_size() const {
  return dd_.size();
}
void DashDotProto::clear_dd() {
  dd_.Clear();
}
double DashDotProto::dd(int index) const {
  // @@protoc_insertion_point(field_get:DashDotProto.dd)
  return dd_.Get(index);
}
void DashDotProto::set_dd(int index, double value) {
  dd_.Set(index, value);
  // @@protoc_insertion_point(field_set:DashDotProto.dd)
}
void DashDotProto::add_dd(double value) {
  dd_.Add(value);
  // @@protoc_insertion_point(field_add:DashDotProto.dd)
}
const ::google::protobuf::RepeatedField< double >&
DashDotProto::dd() const {
  // @@protoc_insertion_point(field_list:DashDotProto.dd)
  return dd_;
}
::google::protobuf::RepeatedField< double >*
DashDotProto::mutable_dd() {
  // @@protoc_insertion_point(field_mutable_list:DashDotProto.dd)
  return &dd_;
}

// double offset = 2;
void DashDotProto::clear_offset() {
  offset_ = 0;
}
double DashDotProto::offset() const {
  // @@protoc_insertion_point(field_get:DashDotProto.offset)
  return offset_;
}
void DashDotProto::set_offset(double value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:DashDotProto.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathSymProto::kNameFieldNumber;
const int PathSymProto::kStepFieldNumber;
const int PathSymProto::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathSymProto::PathSymProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathSymProto)
}
PathSymProto::PathSymProto(const PathSymProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&step_, &from.step_,
    reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&step_) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:PathSymProto)
}

void PathSymProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_, 0, reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&step_) + sizeof(offset_));
  _cached_size_ = 0;
}

PathSymProto::~PathSymProto() {
  // @@protoc_insertion_point(destructor:PathSymProto)
  SharedDtor();
}

void PathSymProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PathSymProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PathSymProto& PathSymProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathSymProto* PathSymProto::New(::google::protobuf::Arena* arena) const {
  PathSymProto* n = new PathSymProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathSymProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathSymProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_, 0, reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&step_) + sizeof(offset_));
}

bool PathSymProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathSymProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PathSymProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double step = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathSymProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathSymProto)
  return false;
#undef DO_
}

void PathSymProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathSymProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PathSymProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double step = 2;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->step(), output);
  }

  // double offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:PathSymProto)
}

size_t PathSymProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathSymProto)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double step = 2;
  if (this->step() != 0) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  if (this->offset() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathSymProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PathSymProto*>(&from));
}

void PathSymProto::MergeFrom(const PathSymProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathSymProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void PathSymProto::CopyFrom(const PathSymProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathSymProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSymProto::IsInitialized() const {
  return true;
}

void PathSymProto::Swap(PathSymProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathSymProto::InternalSwap(PathSymProto* other) {
  name_.Swap(&other->name_);
  std::swap(step_, other->step_);
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PathSymProto::GetTypeName() const {
  return "PathSymProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathSymProto

// string name = 1;
void PathSymProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PathSymProto::name() const {
  // @@protoc_insertion_point(field_get:PathSymProto.name)
  return name_.GetNoArena();
}
void PathSymProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PathSymProto.name)
}
#if LANG_CXX11
void PathSymProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PathSymProto.name)
}
#endif
void PathSymProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PathSymProto.name)
}
void PathSymProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PathSymProto.name)
}
::std::string* PathSymProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PathSymProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PathSymProto::release_name() {
  // @@protoc_insertion_point(field_release:PathSymProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PathSymProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PathSymProto.name)
}

// double step = 2;
void PathSymProto::clear_step() {
  step_ = 0;
}
double PathSymProto::step() const {
  // @@protoc_insertion_point(field_get:PathSymProto.step)
  return step_;
}
void PathSymProto::set_step(double value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:PathSymProto.step)
}

// double offset = 3;
void PathSymProto::clear_offset() {
  offset_ = 0;
}
double PathSymProto::offset() const {
  // @@protoc_insertion_point(field_get:PathSymProto.offset)
  return offset_;
}
void PathSymProto::set_offset(double value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:PathSymProto.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineRuleProto::kWidthFieldNumber;
const int LineRuleProto::kColorFieldNumber;
const int LineRuleProto::kDashdotFieldNumber;
const int LineRuleProto::kPriorityFieldNumber;
const int LineRuleProto::kPathsymFieldNumber;
const int LineRuleProto::kJoinFieldNumber;
const int LineRuleProto::kCapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineRuleProto::LineRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LineRuleProto)
}
LineRuleProto::LineRuleProto(const LineRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dashdot()) {
    dashdot_ = new ::DashDotProto(*from.dashdot_);
  } else {
    dashdot_ = NULL;
  }
  if (from.has_pathsym()) {
    pathsym_ = new ::PathSymProto(*from.pathsym_);
  } else {
    pathsym_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&width_) + sizeof(cap_));
  // @@protoc_insertion_point(copy_constructor:LineRuleProto)
}

void LineRuleProto::SharedCtor() {
  ::memset(&dashdot_, 0, reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&dashdot_) + sizeof(cap_));
  _cached_size_ = 0;
}

LineRuleProto::~LineRuleProto() {
  // @@protoc_insertion_point(destructor:LineRuleProto)
  SharedDtor();
}

void LineRuleProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dashdot_;
  }
  if (this != internal_default_instance()) {
    delete pathsym_;
  }
}

void LineRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LineRuleProto& LineRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

LineRuleProto* LineRuleProto::New(::google::protobuf::Arena* arena) const {
  LineRuleProto* n = new LineRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineRuleProto)
  if (GetArenaNoVirtual() == NULL && dashdot_ != NULL) {
    delete dashdot_;
  }
  dashdot_ = NULL;
  if (GetArenaNoVirtual() == NULL && pathsym_ != NULL) {
    delete pathsym_;
  }
  pathsym_ = NULL;
  ::memset(&width_, 0, reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&width_) + sizeof(cap_));
}

bool LineRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LineRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DashDotProto dashdot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dashdot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PathSymProto pathsym = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathsym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineJoin join = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join(static_cast< ::LineJoin >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineCap cap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cap(static_cast< ::LineCap >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LineRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LineRuleProto)
  return false;
#undef DO_
}

void LineRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LineRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->dashdot_, output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // .PathSymProto pathsym = 5;
  if (this->has_pathsym()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->pathsym_, output);
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->join(), output);
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->cap(), output);
  }

  // @@protoc_insertion_point(serialize_end:LineRuleProto)
}

size_t LineRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineRuleProto)
  size_t total_size = 0;

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dashdot_);
  }

  // .PathSymProto pathsym = 5;
  if (this->has_pathsym()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pathsym_);
  }

  // double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join());
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineRuleProto*>(&from));
}

void LineRuleProto::MergeFrom(const LineRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LineRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dashdot()) {
    mutable_dashdot()->::DashDotProto::MergeFrom(from.dashdot());
  }
  if (from.has_pathsym()) {
    mutable_pathsym()->::PathSymProto::MergeFrom(from.pathsym());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.join() != 0) {
    set_join(from.join());
  }
  if (from.cap() != 0) {
    set_cap(from.cap());
  }
}

void LineRuleProto::CopyFrom(const LineRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRuleProto::IsInitialized() const {
  return true;
}

void LineRuleProto::Swap(LineRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineRuleProto::InternalSwap(LineRuleProto* other) {
  std::swap(dashdot_, other->dashdot_);
  std::swap(pathsym_, other->pathsym_);
  std::swap(width_, other->width_);
  std::swap(color_, other->color_);
  std::swap(priority_, other->priority_);
  std::swap(join_, other->join_);
  std::swap(cap_, other->cap_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LineRuleProto::GetTypeName() const {
  return "LineRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineRuleProto

// double width = 1;
void LineRuleProto::clear_width() {
  width_ = 0;
}
double LineRuleProto::width() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.width)
  return width_;
}
void LineRuleProto::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:LineRuleProto.width)
}

// uint32 color = 2;
void LineRuleProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 LineRuleProto::color() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.color)
  return color_;
}
void LineRuleProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:LineRuleProto.color)
}

// .DashDotProto dashdot = 3;
bool LineRuleProto::has_dashdot() const {
  return this != internal_default_instance() && dashdot_ != NULL;
}
void LineRuleProto::clear_dashdot() {
  if (GetArenaNoVirtual() == NULL && dashdot_ != NULL) delete dashdot_;
  dashdot_ = NULL;
}
const ::DashDotProto& LineRuleProto::dashdot() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.dashdot)
  return dashdot_ != NULL ? *dashdot_
                         : *::DashDotProto::internal_default_instance();
}
::DashDotProto* LineRuleProto::mutable_dashdot() {
  
  if (dashdot_ == NULL) {
    dashdot_ = new ::DashDotProto;
  }
  // @@protoc_insertion_point(field_mutable:LineRuleProto.dashdot)
  return dashdot_;
}
::DashDotProto* LineRuleProto::release_dashdot() {
  // @@protoc_insertion_point(field_release:LineRuleProto.dashdot)
  
  ::DashDotProto* temp = dashdot_;
  dashdot_ = NULL;
  return temp;
}
void LineRuleProto::set_allocated_dashdot(::DashDotProto* dashdot) {
  delete dashdot_;
  dashdot_ = dashdot;
  if (dashdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LineRuleProto.dashdot)
}

// int32 priority = 4;
void LineRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 LineRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.priority)
  return priority_;
}
void LineRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:LineRuleProto.priority)
}

// .PathSymProto pathsym = 5;
bool LineRuleProto::has_pathsym() const {
  return this != internal_default_instance() && pathsym_ != NULL;
}
void LineRuleProto::clear_pathsym() {
  if (GetArenaNoVirtual() == NULL && pathsym_ != NULL) delete pathsym_;
  pathsym_ = NULL;
}
const ::PathSymProto& LineRuleProto::pathsym() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.pathsym)
  return pathsym_ != NULL ? *pathsym_
                         : *::PathSymProto::internal_default_instance();
}
::PathSymProto* LineRuleProto::mutable_pathsym() {
  
  if (pathsym_ == NULL) {
    pathsym_ = new ::PathSymProto;
  }
  // @@protoc_insertion_point(field_mutable:LineRuleProto.pathsym)
  return pathsym_;
}
::PathSymProto* LineRuleProto::release_pathsym() {
  // @@protoc_insertion_point(field_release:LineRuleProto.pathsym)
  
  ::PathSymProto* temp = pathsym_;
  pathsym_ = NULL;
  return temp;
}
void LineRuleProto::set_allocated_pathsym(::PathSymProto* pathsym) {
  delete pathsym_;
  pathsym_ = pathsym;
  if (pathsym) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LineRuleProto.pathsym)
}

// .LineJoin join = 6;
void LineRuleProto::clear_join() {
  join_ = 0;
}
::LineJoin LineRuleProto::join() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.join)
  return static_cast< ::LineJoin >(join_);
}
void LineRuleProto::set_join(::LineJoin value) {
  
  join_ = value;
  // @@protoc_insertion_point(field_set:LineRuleProto.join)
}

// .LineCap cap = 7;
void LineRuleProto::clear_cap() {
  cap_ = 0;
}
::LineCap LineRuleProto::cap() const {
  // @@protoc_insertion_point(field_get:LineRuleProto.cap)
  return static_cast< ::LineCap >(cap_);
}
void LineRuleProto::set_cap(::LineCap value) {
  
  cap_ = value;
  // @@protoc_insertion_point(field_set:LineRuleProto.cap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineDefProto::kWidthFieldNumber;
const int LineDefProto::kColorFieldNumber;
const int LineDefProto::kDashdotFieldNumber;
const int LineDefProto::kPathsymFieldNumber;
const int LineDefProto::kJoinFieldNumber;
const int LineDefProto::kCapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineDefProto::LineDefProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LineDefProto)
}
LineDefProto::LineDefProto(const LineDefProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dashdot()) {
    dashdot_ = new ::DashDotProto(*from.dashdot_);
  } else {
    dashdot_ = NULL;
  }
  if (from.has_pathsym()) {
    pathsym_ = new ::PathSymProto(*from.pathsym_);
  } else {
    pathsym_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&width_) + sizeof(cap_));
  // @@protoc_insertion_point(copy_constructor:LineDefProto)
}

void LineDefProto::SharedCtor() {
  ::memset(&dashdot_, 0, reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&dashdot_) + sizeof(cap_));
  _cached_size_ = 0;
}

LineDefProto::~LineDefProto() {
  // @@protoc_insertion_point(destructor:LineDefProto)
  SharedDtor();
}

void LineDefProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dashdot_;
  }
  if (this != internal_default_instance()) {
    delete pathsym_;
  }
}

void LineDefProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LineDefProto& LineDefProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

LineDefProto* LineDefProto::New(::google::protobuf::Arena* arena) const {
  LineDefProto* n = new LineDefProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineDefProto)
  if (GetArenaNoVirtual() == NULL && dashdot_ != NULL) {
    delete dashdot_;
  }
  dashdot_ = NULL;
  if (GetArenaNoVirtual() == NULL && pathsym_ != NULL) {
    delete pathsym_;
  }
  pathsym_ = NULL;
  ::memset(&width_, 0, reinterpret_cast<char*>(&cap_) -
    reinterpret_cast<char*>(&width_) + sizeof(cap_));
}

bool LineDefProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LineDefProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DashDotProto dashdot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dashdot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PathSymProto pathsym = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathsym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineJoin join = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join(static_cast< ::LineJoin >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineCap cap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cap(static_cast< ::LineCap >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LineDefProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LineDefProto)
  return false;
#undef DO_
}

void LineDefProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LineDefProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->dashdot_, output);
  }

  // .PathSymProto pathsym = 4;
  if (this->has_pathsym()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->pathsym_, output);
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->join(), output);
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->cap(), output);
  }

  // @@protoc_insertion_point(serialize_end:LineDefProto)
}

size_t LineDefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineDefProto)
  size_t total_size = 0;

  // .DashDotProto dashdot = 3;
  if (this->has_dashdot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dashdot_);
  }

  // .PathSymProto pathsym = 4;
  if (this->has_pathsym()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pathsym_);
  }

  // double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // .LineJoin join = 6;
  if (this->join() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join());
  }

  // .LineCap cap = 7;
  if (this->cap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineDefProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineDefProto*>(&from));
}

void LineDefProto::MergeFrom(const LineDefProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LineDefProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dashdot()) {
    mutable_dashdot()->::DashDotProto::MergeFrom(from.dashdot());
  }
  if (from.has_pathsym()) {
    mutable_pathsym()->::PathSymProto::MergeFrom(from.pathsym());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.join() != 0) {
    set_join(from.join());
  }
  if (from.cap() != 0) {
    set_cap(from.cap());
  }
}

void LineDefProto::CopyFrom(const LineDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineDefProto::IsInitialized() const {
  return true;
}

void LineDefProto::Swap(LineDefProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineDefProto::InternalSwap(LineDefProto* other) {
  std::swap(dashdot_, other->dashdot_);
  std::swap(pathsym_, other->pathsym_);
  std::swap(width_, other->width_);
  std::swap(color_, other->color_);
  std::swap(join_, other->join_);
  std::swap(cap_, other->cap_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LineDefProto::GetTypeName() const {
  return "LineDefProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineDefProto

// double width = 1;
void LineDefProto::clear_width() {
  width_ = 0;
}
double LineDefProto::width() const {
  // @@protoc_insertion_point(field_get:LineDefProto.width)
  return width_;
}
void LineDefProto::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:LineDefProto.width)
}

// uint32 color = 2;
void LineDefProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 LineDefProto::color() const {
  // @@protoc_insertion_point(field_get:LineDefProto.color)
  return color_;
}
void LineDefProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:LineDefProto.color)
}

// .DashDotProto dashdot = 3;
bool LineDefProto::has_dashdot() const {
  return this != internal_default_instance() && dashdot_ != NULL;
}
void LineDefProto::clear_dashdot() {
  if (GetArenaNoVirtual() == NULL && dashdot_ != NULL) delete dashdot_;
  dashdot_ = NULL;
}
const ::DashDotProto& LineDefProto::dashdot() const {
  // @@protoc_insertion_point(field_get:LineDefProto.dashdot)
  return dashdot_ != NULL ? *dashdot_
                         : *::DashDotProto::internal_default_instance();
}
::DashDotProto* LineDefProto::mutable_dashdot() {
  
  if (dashdot_ == NULL) {
    dashdot_ = new ::DashDotProto;
  }
  // @@protoc_insertion_point(field_mutable:LineDefProto.dashdot)
  return dashdot_;
}
::DashDotProto* LineDefProto::release_dashdot() {
  // @@protoc_insertion_point(field_release:LineDefProto.dashdot)
  
  ::DashDotProto* temp = dashdot_;
  dashdot_ = NULL;
  return temp;
}
void LineDefProto::set_allocated_dashdot(::DashDotProto* dashdot) {
  delete dashdot_;
  dashdot_ = dashdot;
  if (dashdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LineDefProto.dashdot)
}

// .PathSymProto pathsym = 4;
bool LineDefProto::has_pathsym() const {
  return this != internal_default_instance() && pathsym_ != NULL;
}
void LineDefProto::clear_pathsym() {
  if (GetArenaNoVirtual() == NULL && pathsym_ != NULL) delete pathsym_;
  pathsym_ = NULL;
}
const ::PathSymProto& LineDefProto::pathsym() const {
  // @@protoc_insertion_point(field_get:LineDefProto.pathsym)
  return pathsym_ != NULL ? *pathsym_
                         : *::PathSymProto::internal_default_instance();
}
::PathSymProto* LineDefProto::mutable_pathsym() {
  
  if (pathsym_ == NULL) {
    pathsym_ = new ::PathSymProto;
  }
  // @@protoc_insertion_point(field_mutable:LineDefProto.pathsym)
  return pathsym_;
}
::PathSymProto* LineDefProto::release_pathsym() {
  // @@protoc_insertion_point(field_release:LineDefProto.pathsym)
  
  ::PathSymProto* temp = pathsym_;
  pathsym_ = NULL;
  return temp;
}
void LineDefProto::set_allocated_pathsym(::PathSymProto* pathsym) {
  delete pathsym_;
  pathsym_ = pathsym;
  if (pathsym) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LineDefProto.pathsym)
}

// .LineJoin join = 6;
void LineDefProto::clear_join() {
  join_ = 0;
}
::LineJoin LineDefProto::join() const {
  // @@protoc_insertion_point(field_get:LineDefProto.join)
  return static_cast< ::LineJoin >(join_);
}
void LineDefProto::set_join(::LineJoin value) {
  
  join_ = value;
  // @@protoc_insertion_point(field_set:LineDefProto.join)
}

// .LineCap cap = 7;
void LineDefProto::clear_cap() {
  cap_ = 0;
}
::LineCap LineDefProto::cap() const {
  // @@protoc_insertion_point(field_get:LineDefProto.cap)
  return static_cast< ::LineCap >(cap_);
}
void LineDefProto::set_cap(::LineCap value) {
  
  cap_ = value;
  // @@protoc_insertion_point(field_set:LineDefProto.cap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AreaRuleProto::kColorFieldNumber;
const int AreaRuleProto::kBorderFieldNumber;
const int AreaRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AreaRuleProto::AreaRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AreaRuleProto)
}
AreaRuleProto::AreaRuleProto(const AreaRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_border()) {
    border_ = new ::LineDefProto(*from.border_);
  } else {
    border_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&color_) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:AreaRuleProto)
}

void AreaRuleProto::SharedCtor() {
  ::memset(&border_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&border_) + sizeof(priority_));
  _cached_size_ = 0;
}

AreaRuleProto::~AreaRuleProto() {
  // @@protoc_insertion_point(destructor:AreaRuleProto)
  SharedDtor();
}

void AreaRuleProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete border_;
  }
}

void AreaRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AreaRuleProto& AreaRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

AreaRuleProto* AreaRuleProto::New(::google::protobuf::Arena* arena) const {
  AreaRuleProto* n = new AreaRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AreaRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AreaRuleProto)
  if (GetArenaNoVirtual() == NULL && border_ != NULL) {
    delete border_;
  }
  border_ = NULL;
  ::memset(&color_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&color_) + sizeof(priority_));
}

bool AreaRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AreaRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineDefProto border = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AreaRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AreaRuleProto)
  return false;
#undef DO_
}

void AreaRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AreaRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // .LineDefProto border = 2;
  if (this->has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->border_, output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:AreaRuleProto)
}

size_t AreaRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AreaRuleProto)
  size_t total_size = 0;

  // .LineDefProto border = 2;
  if (this->has_border()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->border_);
  }

  // uint32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AreaRuleProto*>(&from));
}

void AreaRuleProto::MergeFrom(const AreaRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AreaRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_border()) {
    mutable_border()->::LineDefProto::MergeFrom(from.border());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void AreaRuleProto::CopyFrom(const AreaRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AreaRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaRuleProto::IsInitialized() const {
  return true;
}

void AreaRuleProto::Swap(AreaRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AreaRuleProto::InternalSwap(AreaRuleProto* other) {
  std::swap(border_, other->border_);
  std::swap(color_, other->color_);
  std::swap(priority_, other->priority_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AreaRuleProto::GetTypeName() const {
  return "AreaRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AreaRuleProto

// uint32 color = 1;
void AreaRuleProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 AreaRuleProto::color() const {
  // @@protoc_insertion_point(field_get:AreaRuleProto.color)
  return color_;
}
void AreaRuleProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:AreaRuleProto.color)
}

// .LineDefProto border = 2;
bool AreaRuleProto::has_border() const {
  return this != internal_default_instance() && border_ != NULL;
}
void AreaRuleProto::clear_border() {
  if (GetArenaNoVirtual() == NULL && border_ != NULL) delete border_;
  border_ = NULL;
}
const ::LineDefProto& AreaRuleProto::border() const {
  // @@protoc_insertion_point(field_get:AreaRuleProto.border)
  return border_ != NULL ? *border_
                         : *::LineDefProto::internal_default_instance();
}
::LineDefProto* AreaRuleProto::mutable_border() {
  
  if (border_ == NULL) {
    border_ = new ::LineDefProto;
  }
  // @@protoc_insertion_point(field_mutable:AreaRuleProto.border)
  return border_;
}
::LineDefProto* AreaRuleProto::release_border() {
  // @@protoc_insertion_point(field_release:AreaRuleProto.border)
  
  ::LineDefProto* temp = border_;
  border_ = NULL;
  return temp;
}
void AreaRuleProto::set_allocated_border(::LineDefProto* border) {
  delete border_;
  border_ = border;
  if (border) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AreaRuleProto.border)
}

// int32 priority = 3;
void AreaRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 AreaRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:AreaRuleProto.priority)
  return priority_;
}
void AreaRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:AreaRuleProto.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolRuleProto::kNameFieldNumber;
const int SymbolRuleProto::kApplyForTypeFieldNumber;
const int SymbolRuleProto::kPriorityFieldNumber;
const int SymbolRuleProto::kMinDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolRuleProto::SymbolRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SymbolRuleProto)
}
SymbolRuleProto::SymbolRuleProto(const SymbolRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&apply_for_type_, &from.apply_for_type_,
    reinterpret_cast<char*>(&min_distance_) -
    reinterpret_cast<char*>(&apply_for_type_) + sizeof(min_distance_));
  // @@protoc_insertion_point(copy_constructor:SymbolRuleProto)
}

void SymbolRuleProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&apply_for_type_, 0, reinterpret_cast<char*>(&min_distance_) -
    reinterpret_cast<char*>(&apply_for_type_) + sizeof(min_distance_));
  _cached_size_ = 0;
}

SymbolRuleProto::~SymbolRuleProto() {
  // @@protoc_insertion_point(destructor:SymbolRuleProto)
  SharedDtor();
}

void SymbolRuleProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SymbolRuleProto& SymbolRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymbolRuleProto* SymbolRuleProto::New(::google::protobuf::Arena* arena) const {
  SymbolRuleProto* n = new SymbolRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymbolRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SymbolRuleProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&apply_for_type_, 0, reinterpret_cast<char*>(&min_distance_) -
    reinterpret_cast<char*>(&apply_for_type_) + sizeof(min_distance_));
}

bool SymbolRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SymbolRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SymbolRuleProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 apply_for_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_for_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SymbolRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SymbolRuleProto)
  return false;
#undef DO_
}

void SymbolRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SymbolRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SymbolRuleProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 apply_for_type = 2;
  if (this->apply_for_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->apply_for_type(), output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // int32 min_distance = 4;
  if (this->min_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_distance(), output);
  }

  // @@protoc_insertion_point(serialize_end:SymbolRuleProto)
}

size_t SymbolRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SymbolRuleProto)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 apply_for_type = 2;
  if (this->apply_for_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->apply_for_type());
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // int32 min_distance = 4;
  if (this->min_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SymbolRuleProto*>(&from));
}

void SymbolRuleProto::MergeFrom(const SymbolRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SymbolRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.apply_for_type() != 0) {
    set_apply_for_type(from.apply_for_type());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.min_distance() != 0) {
    set_min_distance(from.min_distance());
  }
}

void SymbolRuleProto::CopyFrom(const SymbolRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SymbolRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRuleProto::IsInitialized() const {
  return true;
}

void SymbolRuleProto::Swap(SymbolRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolRuleProto::InternalSwap(SymbolRuleProto* other) {
  name_.Swap(&other->name_);
  std::swap(apply_for_type_, other->apply_for_type_);
  std::swap(priority_, other->priority_);
  std::swap(min_distance_, other->min_distance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SymbolRuleProto::GetTypeName() const {
  return "SymbolRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymbolRuleProto

// string name = 1;
void SymbolRuleProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SymbolRuleProto::name() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.name)
  return name_.GetNoArena();
}
void SymbolRuleProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SymbolRuleProto.name)
}
#if LANG_CXX11
void SymbolRuleProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SymbolRuleProto.name)
}
#endif
void SymbolRuleProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SymbolRuleProto.name)
}
void SymbolRuleProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SymbolRuleProto.name)
}
::std::string* SymbolRuleProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SymbolRuleProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymbolRuleProto::release_name() {
  // @@protoc_insertion_point(field_release:SymbolRuleProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymbolRuleProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SymbolRuleProto.name)
}

// int32 apply_for_type = 2;
void SymbolRuleProto::clear_apply_for_type() {
  apply_for_type_ = 0;
}
::google::protobuf::int32 SymbolRuleProto::apply_for_type() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.apply_for_type)
  return apply_for_type_;
}
void SymbolRuleProto::set_apply_for_type(::google::protobuf::int32 value) {
  
  apply_for_type_ = value;
  // @@protoc_insertion_point(field_set:SymbolRuleProto.apply_for_type)
}

// int32 priority = 3;
void SymbolRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 SymbolRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.priority)
  return priority_;
}
void SymbolRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:SymbolRuleProto.priority)
}

// int32 min_distance = 4;
void SymbolRuleProto::clear_min_distance() {
  min_distance_ = 0;
}
::google::protobuf::int32 SymbolRuleProto::min_distance() const {
  // @@protoc_insertion_point(field_get:SymbolRuleProto.min_distance)
  return min_distance_;
}
void SymbolRuleProto::set_min_distance(::google::protobuf::int32 value) {
  
  min_distance_ = value;
  // @@protoc_insertion_point(field_set:SymbolRuleProto.min_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptionDefProto::kHeightFieldNumber;
const int CaptionDefProto::kColorFieldNumber;
const int CaptionDefProto::kStrokeColorFieldNumber;
const int CaptionDefProto::kOffsetXFieldNumber;
const int CaptionDefProto::kOffsetYFieldNumber;
const int CaptionDefProto::kTextFieldNumber;
const int CaptionDefProto::kIsOptionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptionDefProto::CaptionDefProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CaptionDefProto)
}
CaptionDefProto::CaptionDefProto(const CaptionDefProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&is_optional_) -
    reinterpret_cast<char*>(&height_) + sizeof(is_optional_));
  // @@protoc_insertion_point(copy_constructor:CaptionDefProto)
}

void CaptionDefProto::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&is_optional_) -
    reinterpret_cast<char*>(&height_) + sizeof(is_optional_));
  _cached_size_ = 0;
}

CaptionDefProto::~CaptionDefProto() {
  // @@protoc_insertion_point(destructor:CaptionDefProto)
  SharedDtor();
}

void CaptionDefProto::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CaptionDefProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CaptionDefProto& CaptionDefProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

CaptionDefProto* CaptionDefProto::New(::google::protobuf::Arena* arena) const {
  CaptionDefProto* n = new CaptionDefProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptionDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionDefProto)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&is_optional_) -
    reinterpret_cast<char*>(&height_) + sizeof(is_optional_));
}

bool CaptionDefProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CaptionDefProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stroke_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroke_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CaptionDefProto.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_optional = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_optional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CaptionDefProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CaptionDefProto)
  return false;
#undef DO_
}

void CaptionDefProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CaptionDefProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stroke_color(), output);
  }

  // int32 offset_x = 4;
  if (this->offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset_x(), output);
  }

  // int32 offset_y = 5;
  if (this->offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offset_y(), output);
  }

  // string text = 6;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CaptionDefProto.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // bool is_optional = 7;
  if (this->is_optional() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_optional(), output);
  }

  // @@protoc_insertion_point(serialize_end:CaptionDefProto)
}

size_t CaptionDefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaptionDefProto)
  size_t total_size = 0;

  // string text = 6;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroke_color());
  }

  // int32 offset_x = 4;
  if (this->offset_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset_x());
  }

  // int32 offset_y = 5;
  if (this->offset_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset_y());
  }

  // bool is_optional = 7;
  if (this->is_optional() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptionDefProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptionDefProto*>(&from));
}

void CaptionDefProto::MergeFrom(const CaptionDefProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CaptionDefProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.stroke_color() != 0) {
    set_stroke_color(from.stroke_color());
  }
  if (from.offset_x() != 0) {
    set_offset_x(from.offset_x());
  }
  if (from.offset_y() != 0) {
    set_offset_y(from.offset_y());
  }
  if (from.is_optional() != 0) {
    set_is_optional(from.is_optional());
  }
}

void CaptionDefProto::CopyFrom(const CaptionDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionDefProto::IsInitialized() const {
  return true;
}

void CaptionDefProto::Swap(CaptionDefProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptionDefProto::InternalSwap(CaptionDefProto* other) {
  text_.Swap(&other->text_);
  std::swap(height_, other->height_);
  std::swap(color_, other->color_);
  std::swap(stroke_color_, other->stroke_color_);
  std::swap(offset_x_, other->offset_x_);
  std::swap(offset_y_, other->offset_y_);
  std::swap(is_optional_, other->is_optional_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CaptionDefProto::GetTypeName() const {
  return "CaptionDefProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptionDefProto

// int32 height = 1;
void CaptionDefProto::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 CaptionDefProto::height() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.height)
  return height_;
}
void CaptionDefProto::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CaptionDefProto.height)
}

// uint32 color = 2;
void CaptionDefProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 CaptionDefProto::color() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.color)
  return color_;
}
void CaptionDefProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:CaptionDefProto.color)
}

// uint32 stroke_color = 3;
void CaptionDefProto::clear_stroke_color() {
  stroke_color_ = 0u;
}
::google::protobuf::uint32 CaptionDefProto::stroke_color() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.stroke_color)
  return stroke_color_;
}
void CaptionDefProto::set_stroke_color(::google::protobuf::uint32 value) {
  
  stroke_color_ = value;
  // @@protoc_insertion_point(field_set:CaptionDefProto.stroke_color)
}

// int32 offset_x = 4;
void CaptionDefProto::clear_offset_x() {
  offset_x_ = 0;
}
::google::protobuf::int32 CaptionDefProto::offset_x() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.offset_x)
  return offset_x_;
}
void CaptionDefProto::set_offset_x(::google::protobuf::int32 value) {
  
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:CaptionDefProto.offset_x)
}

// int32 offset_y = 5;
void CaptionDefProto::clear_offset_y() {
  offset_y_ = 0;
}
::google::protobuf::int32 CaptionDefProto::offset_y() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.offset_y)
  return offset_y_;
}
void CaptionDefProto::set_offset_y(::google::protobuf::int32 value) {
  
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:CaptionDefProto.offset_y)
}

// string text = 6;
void CaptionDefProto::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CaptionDefProto::text() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.text)
  return text_.GetNoArena();
}
void CaptionDefProto::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CaptionDefProto.text)
}
#if LANG_CXX11
void CaptionDefProto::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CaptionDefProto.text)
}
#endif
void CaptionDefProto::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CaptionDefProto.text)
}
void CaptionDefProto::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CaptionDefProto.text)
}
::std::string* CaptionDefProto::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:CaptionDefProto.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CaptionDefProto::release_text() {
  // @@protoc_insertion_point(field_release:CaptionDefProto.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CaptionDefProto::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CaptionDefProto.text)
}

// bool is_optional = 7;
void CaptionDefProto::clear_is_optional() {
  is_optional_ = false;
}
bool CaptionDefProto::is_optional() const {
  // @@protoc_insertion_point(field_get:CaptionDefProto.is_optional)
  return is_optional_;
}
void CaptionDefProto::set_is_optional(bool value) {
  
  is_optional_ = value;
  // @@protoc_insertion_point(field_set:CaptionDefProto.is_optional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptionRuleProto::kPrimaryFieldNumber;
const int CaptionRuleProto::kSecondaryFieldNumber;
const int CaptionRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptionRuleProto::CaptionRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CaptionRuleProto)
}
CaptionRuleProto::CaptionRuleProto(const CaptionRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primary()) {
    primary_ = new ::CaptionDefProto(*from.primary_);
  } else {
    primary_ = NULL;
  }
  if (from.has_secondary()) {
    secondary_ = new ::CaptionDefProto(*from.secondary_);
  } else {
    secondary_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:CaptionRuleProto)
}

void CaptionRuleProto::SharedCtor() {
  ::memset(&primary_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&primary_) + sizeof(priority_));
  _cached_size_ = 0;
}

CaptionRuleProto::~CaptionRuleProto() {
  // @@protoc_insertion_point(destructor:CaptionRuleProto)
  SharedDtor();
}

void CaptionRuleProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete primary_;
  }
  if (this != internal_default_instance()) {
    delete secondary_;
  }
}

void CaptionRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CaptionRuleProto& CaptionRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

CaptionRuleProto* CaptionRuleProto::New(::google::protobuf::Arena* arena) const {
  CaptionRuleProto* n = new CaptionRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptionRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionRuleProto)
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  if (GetArenaNoVirtual() == NULL && secondary_ != NULL) {
    delete secondary_;
  }
  secondary_ = NULL;
  priority_ = 0;
}

bool CaptionRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CaptionRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CaptionDefProto primary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CaptionDefProto secondary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CaptionRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CaptionRuleProto)
  return false;
#undef DO_
}

void CaptionRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CaptionRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->primary_, output);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->secondary_, output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:CaptionRuleProto)
}

size_t CaptionRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaptionRuleProto)
  size_t total_size = 0;

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->primary_);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->secondary_);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptionRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CaptionRuleProto*>(&from));
}

void CaptionRuleProto::MergeFrom(const CaptionRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CaptionRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary()) {
    mutable_primary()->::CaptionDefProto::MergeFrom(from.primary());
  }
  if (from.has_secondary()) {
    mutable_secondary()->::CaptionDefProto::MergeFrom(from.secondary());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void CaptionRuleProto::CopyFrom(const CaptionRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionRuleProto::IsInitialized() const {
  return true;
}

void CaptionRuleProto::Swap(CaptionRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptionRuleProto::InternalSwap(CaptionRuleProto* other) {
  std::swap(primary_, other->primary_);
  std::swap(secondary_, other->secondary_);
  std::swap(priority_, other->priority_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CaptionRuleProto::GetTypeName() const {
  return "CaptionRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptionRuleProto

// .CaptionDefProto primary = 1;
bool CaptionRuleProto::has_primary() const {
  return this != internal_default_instance() && primary_ != NULL;
}
void CaptionRuleProto::clear_primary() {
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) delete primary_;
  primary_ = NULL;
}
const ::CaptionDefProto& CaptionRuleProto::primary() const {
  // @@protoc_insertion_point(field_get:CaptionRuleProto.primary)
  return primary_ != NULL ? *primary_
                         : *::CaptionDefProto::internal_default_instance();
}
::CaptionDefProto* CaptionRuleProto::mutable_primary() {
  
  if (primary_ == NULL) {
    primary_ = new ::CaptionDefProto;
  }
  // @@protoc_insertion_point(field_mutable:CaptionRuleProto.primary)
  return primary_;
}
::CaptionDefProto* CaptionRuleProto::release_primary() {
  // @@protoc_insertion_point(field_release:CaptionRuleProto.primary)
  
  ::CaptionDefProto* temp = primary_;
  primary_ = NULL;
  return temp;
}
void CaptionRuleProto::set_allocated_primary(::CaptionDefProto* primary) {
  delete primary_;
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CaptionRuleProto.primary)
}

// .CaptionDefProto secondary = 2;
bool CaptionRuleProto::has_secondary() const {
  return this != internal_default_instance() && secondary_ != NULL;
}
void CaptionRuleProto::clear_secondary() {
  if (GetArenaNoVirtual() == NULL && secondary_ != NULL) delete secondary_;
  secondary_ = NULL;
}
const ::CaptionDefProto& CaptionRuleProto::secondary() const {
  // @@protoc_insertion_point(field_get:CaptionRuleProto.secondary)
  return secondary_ != NULL ? *secondary_
                         : *::CaptionDefProto::internal_default_instance();
}
::CaptionDefProto* CaptionRuleProto::mutable_secondary() {
  
  if (secondary_ == NULL) {
    secondary_ = new ::CaptionDefProto;
  }
  // @@protoc_insertion_point(field_mutable:CaptionRuleProto.secondary)
  return secondary_;
}
::CaptionDefProto* CaptionRuleProto::release_secondary() {
  // @@protoc_insertion_point(field_release:CaptionRuleProto.secondary)
  
  ::CaptionDefProto* temp = secondary_;
  secondary_ = NULL;
  return temp;
}
void CaptionRuleProto::set_allocated_secondary(::CaptionDefProto* secondary) {
  delete secondary_;
  secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CaptionRuleProto.secondary)
}

// int32 priority = 3;
void CaptionRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 CaptionRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:CaptionRuleProto.priority)
  return priority_;
}
void CaptionRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:CaptionRuleProto.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircleRuleProto::kRadiusFieldNumber;
const int CircleRuleProto::kColorFieldNumber;
const int CircleRuleProto::kBorderFieldNumber;
const int CircleRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircleRuleProto::CircleRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CircleRuleProto)
}
CircleRuleProto::CircleRuleProto(const CircleRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_border()) {
    border_ = new ::LineDefProto(*from.border_);
  } else {
    border_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&radius_) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:CircleRuleProto)
}

void CircleRuleProto::SharedCtor() {
  ::memset(&border_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&border_) + sizeof(priority_));
  _cached_size_ = 0;
}

CircleRuleProto::~CircleRuleProto() {
  // @@protoc_insertion_point(destructor:CircleRuleProto)
  SharedDtor();
}

void CircleRuleProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete border_;
  }
}

void CircleRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CircleRuleProto& CircleRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

CircleRuleProto* CircleRuleProto::New(::google::protobuf::Arena* arena) const {
  CircleRuleProto* n = new CircleRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CircleRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CircleRuleProto)
  if (GetArenaNoVirtual() == NULL && border_ != NULL) {
    delete border_;
  }
  border_ = NULL;
  ::memset(&radius_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&radius_) + sizeof(priority_));
}

bool CircleRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CircleRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LineDefProto border = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CircleRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CircleRuleProto)
  return false;
#undef DO_
}

void CircleRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CircleRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->radius(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // .LineDefProto border = 3;
  if (this->has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->border_, output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:CircleRuleProto)
}

size_t CircleRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CircleRuleProto)
  size_t total_size = 0;

  // .LineDefProto border = 3;
  if (this->has_border()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->border_);
  }

  // double radius = 1;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CircleRuleProto*>(&from));
}

void CircleRuleProto::MergeFrom(const CircleRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CircleRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_border()) {
    mutable_border()->::LineDefProto::MergeFrom(from.border());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void CircleRuleProto::CopyFrom(const CircleRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CircleRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleRuleProto::IsInitialized() const {
  return true;
}

void CircleRuleProto::Swap(CircleRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircleRuleProto::InternalSwap(CircleRuleProto* other) {
  std::swap(border_, other->border_);
  std::swap(radius_, other->radius_);
  std::swap(color_, other->color_);
  std::swap(priority_, other->priority_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CircleRuleProto::GetTypeName() const {
  return "CircleRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CircleRuleProto

// double radius = 1;
void CircleRuleProto::clear_radius() {
  radius_ = 0;
}
double CircleRuleProto::radius() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.radius)
  return radius_;
}
void CircleRuleProto::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:CircleRuleProto.radius)
}

// uint32 color = 2;
void CircleRuleProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 CircleRuleProto::color() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.color)
  return color_;
}
void CircleRuleProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:CircleRuleProto.color)
}

// .LineDefProto border = 3;
bool CircleRuleProto::has_border() const {
  return this != internal_default_instance() && border_ != NULL;
}
void CircleRuleProto::clear_border() {
  if (GetArenaNoVirtual() == NULL && border_ != NULL) delete border_;
  border_ = NULL;
}
const ::LineDefProto& CircleRuleProto::border() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.border)
  return border_ != NULL ? *border_
                         : *::LineDefProto::internal_default_instance();
}
::LineDefProto* CircleRuleProto::mutable_border() {
  
  if (border_ == NULL) {
    border_ = new ::LineDefProto;
  }
  // @@protoc_insertion_point(field_mutable:CircleRuleProto.border)
  return border_;
}
::LineDefProto* CircleRuleProto::release_border() {
  // @@protoc_insertion_point(field_release:CircleRuleProto.border)
  
  ::LineDefProto* temp = border_;
  border_ = NULL;
  return temp;
}
void CircleRuleProto::set_allocated_border(::LineDefProto* border) {
  delete border_;
  border_ = border;
  if (border) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CircleRuleProto.border)
}

// int32 priority = 4;
void CircleRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 CircleRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:CircleRuleProto.priority)
  return priority_;
}
void CircleRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:CircleRuleProto.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathTextRuleProto::kPrimaryFieldNumber;
const int PathTextRuleProto::kSecondaryFieldNumber;
const int PathTextRuleProto::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathTextRuleProto::PathTextRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathTextRuleProto)
}
PathTextRuleProto::PathTextRuleProto(const PathTextRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primary()) {
    primary_ = new ::CaptionDefProto(*from.primary_);
  } else {
    primary_ = NULL;
  }
  if (from.has_secondary()) {
    secondary_ = new ::CaptionDefProto(*from.secondary_);
  } else {
    secondary_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:PathTextRuleProto)
}

void PathTextRuleProto::SharedCtor() {
  ::memset(&primary_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&primary_) + sizeof(priority_));
  _cached_size_ = 0;
}

PathTextRuleProto::~PathTextRuleProto() {
  // @@protoc_insertion_point(destructor:PathTextRuleProto)
  SharedDtor();
}

void PathTextRuleProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete primary_;
  }
  if (this != internal_default_instance()) {
    delete secondary_;
  }
}

void PathTextRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PathTextRuleProto& PathTextRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathTextRuleProto* PathTextRuleProto::New(::google::protobuf::Arena* arena) const {
  PathTextRuleProto* n = new PathTextRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathTextRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathTextRuleProto)
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  if (GetArenaNoVirtual() == NULL && secondary_ != NULL) {
    delete secondary_;
  }
  secondary_ = NULL;
  priority_ = 0;
}

bool PathTextRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathTextRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CaptionDefProto primary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CaptionDefProto secondary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathTextRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathTextRuleProto)
  return false;
#undef DO_
}

void PathTextRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathTextRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->primary_, output);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->secondary_, output);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:PathTextRuleProto)
}

size_t PathTextRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathTextRuleProto)
  size_t total_size = 0;

  // .CaptionDefProto primary = 1;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->primary_);
  }

  // .CaptionDefProto secondary = 2;
  if (this->has_secondary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->secondary_);
  }

  // int32 priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathTextRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PathTextRuleProto*>(&from));
}

void PathTextRuleProto::MergeFrom(const PathTextRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathTextRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary()) {
    mutable_primary()->::CaptionDefProto::MergeFrom(from.primary());
  }
  if (from.has_secondary()) {
    mutable_secondary()->::CaptionDefProto::MergeFrom(from.secondary());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void PathTextRuleProto::CopyFrom(const PathTextRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathTextRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTextRuleProto::IsInitialized() const {
  return true;
}

void PathTextRuleProto::Swap(PathTextRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathTextRuleProto::InternalSwap(PathTextRuleProto* other) {
  std::swap(primary_, other->primary_);
  std::swap(secondary_, other->secondary_);
  std::swap(priority_, other->priority_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PathTextRuleProto::GetTypeName() const {
  return "PathTextRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathTextRuleProto

// .CaptionDefProto primary = 1;
bool PathTextRuleProto::has_primary() const {
  return this != internal_default_instance() && primary_ != NULL;
}
void PathTextRuleProto::clear_primary() {
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) delete primary_;
  primary_ = NULL;
}
const ::CaptionDefProto& PathTextRuleProto::primary() const {
  // @@protoc_insertion_point(field_get:PathTextRuleProto.primary)
  return primary_ != NULL ? *primary_
                         : *::CaptionDefProto::internal_default_instance();
}
::CaptionDefProto* PathTextRuleProto::mutable_primary() {
  
  if (primary_ == NULL) {
    primary_ = new ::CaptionDefProto;
  }
  // @@protoc_insertion_point(field_mutable:PathTextRuleProto.primary)
  return primary_;
}
::CaptionDefProto* PathTextRuleProto::release_primary() {
  // @@protoc_insertion_point(field_release:PathTextRuleProto.primary)
  
  ::CaptionDefProto* temp = primary_;
  primary_ = NULL;
  return temp;
}
void PathTextRuleProto::set_allocated_primary(::CaptionDefProto* primary) {
  delete primary_;
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PathTextRuleProto.primary)
}

// .CaptionDefProto secondary = 2;
bool PathTextRuleProto::has_secondary() const {
  return this != internal_default_instance() && secondary_ != NULL;
}
void PathTextRuleProto::clear_secondary() {
  if (GetArenaNoVirtual() == NULL && secondary_ != NULL) delete secondary_;
  secondary_ = NULL;
}
const ::CaptionDefProto& PathTextRuleProto::secondary() const {
  // @@protoc_insertion_point(field_get:PathTextRuleProto.secondary)
  return secondary_ != NULL ? *secondary_
                         : *::CaptionDefProto::internal_default_instance();
}
::CaptionDefProto* PathTextRuleProto::mutable_secondary() {
  
  if (secondary_ == NULL) {
    secondary_ = new ::CaptionDefProto;
  }
  // @@protoc_insertion_point(field_mutable:PathTextRuleProto.secondary)
  return secondary_;
}
::CaptionDefProto* PathTextRuleProto::release_secondary() {
  // @@protoc_insertion_point(field_release:PathTextRuleProto.secondary)
  
  ::CaptionDefProto* temp = secondary_;
  secondary_ = NULL;
  return temp;
}
void PathTextRuleProto::set_allocated_secondary(::CaptionDefProto* secondary) {
  delete secondary_;
  secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PathTextRuleProto.secondary)
}

// int32 priority = 3;
void PathTextRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 PathTextRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:PathTextRuleProto.priority)
  return priority_;
}
void PathTextRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:PathTextRuleProto.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShieldRuleProto::kHeightFieldNumber;
const int ShieldRuleProto::kColorFieldNumber;
const int ShieldRuleProto::kStrokeColorFieldNumber;
const int ShieldRuleProto::kPriorityFieldNumber;
const int ShieldRuleProto::kMinDistanceFieldNumber;
const int ShieldRuleProto::kTextColorFieldNumber;
const int ShieldRuleProto::kTextStrokeColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShieldRuleProto::ShieldRuleProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShieldRuleProto)
}
ShieldRuleProto::ShieldRuleProto(const ShieldRuleProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&text_stroke_color_) -
    reinterpret_cast<char*>(&height_) + sizeof(text_stroke_color_));
  // @@protoc_insertion_point(copy_constructor:ShieldRuleProto)
}

void ShieldRuleProto::SharedCtor() {
  ::memset(&height_, 0, reinterpret_cast<char*>(&text_stroke_color_) -
    reinterpret_cast<char*>(&height_) + sizeof(text_stroke_color_));
  _cached_size_ = 0;
}

ShieldRuleProto::~ShieldRuleProto() {
  // @@protoc_insertion_point(destructor:ShieldRuleProto)
  SharedDtor();
}

void ShieldRuleProto::SharedDtor() {
}

void ShieldRuleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShieldRuleProto& ShieldRuleProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShieldRuleProto* ShieldRuleProto::New(::google::protobuf::Arena* arena) const {
  ShieldRuleProto* n = new ShieldRuleProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShieldRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ShieldRuleProto)
  ::memset(&height_, 0, reinterpret_cast<char*>(&text_stroke_color_) -
    reinterpret_cast<char*>(&height_) + sizeof(text_stroke_color_));
}

bool ShieldRuleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShieldRuleProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stroke_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stroke_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 text_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 text_stroke_color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_stroke_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShieldRuleProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShieldRuleProto)
  return false;
#undef DO_
}

void ShieldRuleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShieldRuleProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stroke_color(), output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // int32 min_distance = 5;
  if (this->min_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_distance(), output);
  }

  // uint32 text_color = 6;
  if (this->text_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->text_color(), output);
  }

  // uint32 text_stroke_color = 7;
  if (this->text_stroke_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->text_stroke_color(), output);
  }

  // @@protoc_insertion_point(serialize_end:ShieldRuleProto)
}

size_t ShieldRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShieldRuleProto)
  size_t total_size = 0;

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // uint32 stroke_color = 3;
  if (this->stroke_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stroke_color());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // int32 min_distance = 5;
  if (this->min_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_distance());
  }

  // uint32 text_color = 6;
  if (this->text_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->text_color());
  }

  // uint32 text_stroke_color = 7;
  if (this->text_stroke_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->text_stroke_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldRuleProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShieldRuleProto*>(&from));
}

void ShieldRuleProto::MergeFrom(const ShieldRuleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShieldRuleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.stroke_color() != 0) {
    set_stroke_color(from.stroke_color());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.min_distance() != 0) {
    set_min_distance(from.min_distance());
  }
  if (from.text_color() != 0) {
    set_text_color(from.text_color());
  }
  if (from.text_stroke_color() != 0) {
    set_text_stroke_color(from.text_stroke_color());
  }
}

void ShieldRuleProto::CopyFrom(const ShieldRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShieldRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldRuleProto::IsInitialized() const {
  return true;
}

void ShieldRuleProto::Swap(ShieldRuleProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShieldRuleProto::InternalSwap(ShieldRuleProto* other) {
  std::swap(height_, other->height_);
  std::swap(color_, other->color_);
  std::swap(stroke_color_, other->stroke_color_);
  std::swap(priority_, other->priority_);
  std::swap(min_distance_, other->min_distance_);
  std::swap(text_color_, other->text_color_);
  std::swap(text_stroke_color_, other->text_stroke_color_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ShieldRuleProto::GetTypeName() const {
  return "ShieldRuleProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShieldRuleProto

// int32 height = 1;
void ShieldRuleProto::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 ShieldRuleProto::height() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.height)
  return height_;
}
void ShieldRuleProto::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.height)
}

// uint32 color = 2;
void ShieldRuleProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 ShieldRuleProto::color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.color)
  return color_;
}
void ShieldRuleProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.color)
}

// uint32 stroke_color = 3;
void ShieldRuleProto::clear_stroke_color() {
  stroke_color_ = 0u;
}
::google::protobuf::uint32 ShieldRuleProto::stroke_color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.stroke_color)
  return stroke_color_;
}
void ShieldRuleProto::set_stroke_color(::google::protobuf::uint32 value) {
  
  stroke_color_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.stroke_color)
}

// int32 priority = 4;
void ShieldRuleProto::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 ShieldRuleProto::priority() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.priority)
  return priority_;
}
void ShieldRuleProto::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.priority)
}

// int32 min_distance = 5;
void ShieldRuleProto::clear_min_distance() {
  min_distance_ = 0;
}
::google::protobuf::int32 ShieldRuleProto::min_distance() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.min_distance)
  return min_distance_;
}
void ShieldRuleProto::set_min_distance(::google::protobuf::int32 value) {
  
  min_distance_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.min_distance)
}

// uint32 text_color = 6;
void ShieldRuleProto::clear_text_color() {
  text_color_ = 0u;
}
::google::protobuf::uint32 ShieldRuleProto::text_color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.text_color)
  return text_color_;
}
void ShieldRuleProto::set_text_color(::google::protobuf::uint32 value) {
  
  text_color_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.text_color)
}

// uint32 text_stroke_color = 7;
void ShieldRuleProto::clear_text_stroke_color() {
  text_stroke_color_ = 0u;
}
::google::protobuf::uint32 ShieldRuleProto::text_stroke_color() const {
  // @@protoc_insertion_point(field_get:ShieldRuleProto.text_stroke_color)
  return text_stroke_color_;
}
void ShieldRuleProto::set_text_stroke_color(::google::protobuf::uint32 value) {
  
  text_stroke_color_ = value;
  // @@protoc_insertion_point(field_set:ShieldRuleProto.text_stroke_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawElementProto::kScaleFieldNumber;
const int DrawElementProto::kLinesFieldNumber;
const int DrawElementProto::kAreaFieldNumber;
const int DrawElementProto::kSymbolFieldNumber;
const int DrawElementProto::kCaptionFieldNumber;
const int DrawElementProto::kCircleFieldNumber;
const int DrawElementProto::kPathTextFieldNumber;
const int DrawElementProto::kShieldFieldNumber;
const int DrawElementProto::kApplyIfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawElementProto::DrawElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrawElementProto)
}
DrawElementProto::DrawElementProto(const DrawElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      lines_(from.lines_),
      apply_if_(from.apply_if_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_area()) {
    area_ = new ::AreaRuleProto(*from.area_);
  } else {
    area_ = NULL;
  }
  if (from.has_symbol()) {
    symbol_ = new ::SymbolRuleProto(*from.symbol_);
  } else {
    symbol_ = NULL;
  }
  if (from.has_caption()) {
    caption_ = new ::CaptionRuleProto(*from.caption_);
  } else {
    caption_ = NULL;
  }
  if (from.has_circle()) {
    circle_ = new ::CircleRuleProto(*from.circle_);
  } else {
    circle_ = NULL;
  }
  if (from.has_path_text()) {
    path_text_ = new ::PathTextRuleProto(*from.path_text_);
  } else {
    path_text_ = NULL;
  }
  if (from.has_shield()) {
    shield_ = new ::ShieldRuleProto(*from.shield_);
  } else {
    shield_ = NULL;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:DrawElementProto)
}

void DrawElementProto::SharedCtor() {
  ::memset(&area_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&area_) + sizeof(scale_));
  _cached_size_ = 0;
}

DrawElementProto::~DrawElementProto() {
  // @@protoc_insertion_point(destructor:DrawElementProto)
  SharedDtor();
}

void DrawElementProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete area_;
  }
  if (this != internal_default_instance()) {
    delete symbol_;
  }
  if (this != internal_default_instance()) {
    delete caption_;
  }
  if (this != internal_default_instance()) {
    delete circle_;
  }
  if (this != internal_default_instance()) {
    delete path_text_;
  }
  if (this != internal_default_instance()) {
    delete shield_;
  }
}

void DrawElementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrawElementProto& DrawElementProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

DrawElementProto* DrawElementProto::New(::google::protobuf::Arena* arena) const {
  DrawElementProto* n = new DrawElementProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrawElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DrawElementProto)
  lines_.Clear();
  apply_if_.Clear();
  if (GetArenaNoVirtual() == NULL && area_ != NULL) {
    delete area_;
  }
  area_ = NULL;
  if (GetArenaNoVirtual() == NULL && symbol_ != NULL) {
    delete symbol_;
  }
  symbol_ = NULL;
  if (GetArenaNoVirtual() == NULL && caption_ != NULL) {
    delete caption_;
  }
  caption_ = NULL;
  if (GetArenaNoVirtual() == NULL && circle_ != NULL) {
    delete circle_;
  }
  circle_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_text_ != NULL) {
    delete path_text_;
  }
  path_text_ = NULL;
  if (GetArenaNoVirtual() == NULL && shield_ != NULL) {
    delete shield_;
  }
  shield_ = NULL;
  scale_ = 0;
}

bool DrawElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DrawElementProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .LineRuleProto lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AreaRuleProto area = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SymbolRuleProto symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CaptionRuleProto caption = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CircleRuleProto circle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PathTextRuleProto path_text = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ShieldRuleProto shield = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string apply_if = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_apply_if()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->apply_if(this->apply_if_size() - 1).data(),
            this->apply_if(this->apply_if_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DrawElementProto.apply_if"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DrawElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DrawElementProto)
  return false;
#undef DO_
}

void DrawElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DrawElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scale = 1;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  // repeated .LineRuleProto lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->lines(i), output);
  }

  // .AreaRuleProto area = 3;
  if (this->has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->area_, output);
  }

  // .SymbolRuleProto symbol = 4;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->symbol_, output);
  }

  // .CaptionRuleProto caption = 5;
  if (this->has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->caption_, output);
  }

  // .CircleRuleProto circle = 6;
  if (this->has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->circle_, output);
  }

  // .PathTextRuleProto path_text = 7;
  if (this->has_path_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->path_text_, output);
  }

  // .ShieldRuleProto shield = 8;
  if (this->has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->shield_, output);
  }

  // repeated string apply_if = 9;
  for (int i = 0, n = this->apply_if_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->apply_if(i).data(), this->apply_if(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DrawElementProto.apply_if");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->apply_if(i), output);
  }

  // @@protoc_insertion_point(serialize_end:DrawElementProto)
}

size_t DrawElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrawElementProto)
  size_t total_size = 0;

  // repeated .LineRuleProto lines = 2;
  {
    unsigned int count = this->lines_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lines(i));
    }
  }

  // repeated string apply_if = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->apply_if_size());
  for (int i = 0, n = this->apply_if_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->apply_if(i));
  }

  // .AreaRuleProto area = 3;
  if (this->has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->area_);
  }

  // .SymbolRuleProto symbol = 4;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->symbol_);
  }

  // .CaptionRuleProto caption = 5;
  if (this->has_caption()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->caption_);
  }

  // .CircleRuleProto circle = 6;
  if (this->has_circle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->circle_);
  }

  // .PathTextRuleProto path_text = 7;
  if (this->has_path_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_text_);
  }

  // .ShieldRuleProto shield = 8;
  if (this->has_shield()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shield_);
  }

  // int32 scale = 1;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrawElementProto*>(&from));
}

void DrawElementProto::MergeFrom(const DrawElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrawElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  apply_if_.MergeFrom(from.apply_if_);
  if (from.has_area()) {
    mutable_area()->::AreaRuleProto::MergeFrom(from.area());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::SymbolRuleProto::MergeFrom(from.symbol());
  }
  if (from.has_caption()) {
    mutable_caption()->::CaptionRuleProto::MergeFrom(from.caption());
  }
  if (from.has_circle()) {
    mutable_circle()->::CircleRuleProto::MergeFrom(from.circle());
  }
  if (from.has_path_text()) {
    mutable_path_text()->::PathTextRuleProto::MergeFrom(from.path_text());
  }
  if (from.has_shield()) {
    mutable_shield()->::ShieldRuleProto::MergeFrom(from.shield());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void DrawElementProto::CopyFrom(const DrawElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrawElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawElementProto::IsInitialized() const {
  return true;
}

void DrawElementProto::Swap(DrawElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawElementProto::InternalSwap(DrawElementProto* other) {
  lines_.InternalSwap(&other->lines_);
  apply_if_.InternalSwap(&other->apply_if_);
  std::swap(area_, other->area_);
  std::swap(symbol_, other->symbol_);
  std::swap(caption_, other->caption_);
  std::swap(circle_, other->circle_);
  std::swap(path_text_, other->path_text_);
  std::swap(shield_, other->shield_);
  std::swap(scale_, other->scale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DrawElementProto::GetTypeName() const {
  return "DrawElementProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrawElementProto

// int32 scale = 1;
void DrawElementProto::clear_scale() {
  scale_ = 0;
}
::google::protobuf::int32 DrawElementProto::scale() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.scale)
  return scale_;
}
void DrawElementProto::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:DrawElementProto.scale)
}

// repeated .LineRuleProto lines = 2;
int DrawElementProto::lines_size() const {
  return lines_.size();
}
void DrawElementProto::clear_lines() {
  lines_.Clear();
}
const ::LineRuleProto& DrawElementProto::lines(int index) const {
  // @@protoc_insertion_point(field_get:DrawElementProto.lines)
  return lines_.Get(index);
}
::LineRuleProto* DrawElementProto::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:DrawElementProto.lines)
  return lines_.Mutable(index);
}
::LineRuleProto* DrawElementProto::add_lines() {
  // @@protoc_insertion_point(field_add:DrawElementProto.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::LineRuleProto >*
DrawElementProto::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:DrawElementProto.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::LineRuleProto >&
DrawElementProto::lines() const {
  // @@protoc_insertion_point(field_list:DrawElementProto.lines)
  return lines_;
}

// .AreaRuleProto area = 3;
bool DrawElementProto::has_area() const {
  return this != internal_default_instance() && area_ != NULL;
}
void DrawElementProto::clear_area() {
  if (GetArenaNoVirtual() == NULL && area_ != NULL) delete area_;
  area_ = NULL;
}
const ::AreaRuleProto& DrawElementProto::area() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.area)
  return area_ != NULL ? *area_
                         : *::AreaRuleProto::internal_default_instance();
}
::AreaRuleProto* DrawElementProto::mutable_area() {
  
  if (area_ == NULL) {
    area_ = new ::AreaRuleProto;
  }
  // @@protoc_insertion_point(field_mutable:DrawElementProto.area)
  return area_;
}
::AreaRuleProto* DrawElementProto::release_area() {
  // @@protoc_insertion_point(field_release:DrawElementProto.area)
  
  ::AreaRuleProto* temp = area_;
  area_ = NULL;
  return temp;
}
void DrawElementProto::set_allocated_area(::AreaRuleProto* area) {
  delete area_;
  area_ = area;
  if (area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.area)
}

// .SymbolRuleProto symbol = 4;
bool DrawElementProto::has_symbol() const {
  return this != internal_default_instance() && symbol_ != NULL;
}
void DrawElementProto::clear_symbol() {
  if (GetArenaNoVirtual() == NULL && symbol_ != NULL) delete symbol_;
  symbol_ = NULL;
}
const ::SymbolRuleProto& DrawElementProto::symbol() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.symbol)
  return symbol_ != NULL ? *symbol_
                         : *::SymbolRuleProto::internal_default_instance();
}
::SymbolRuleProto* DrawElementProto::mutable_symbol() {
  
  if (symbol_ == NULL) {
    symbol_ = new ::SymbolRuleProto;
  }
  // @@protoc_insertion_point(field_mutable:DrawElementProto.symbol)
  return symbol_;
}
::SymbolRuleProto* DrawElementProto::release_symbol() {
  // @@protoc_insertion_point(field_release:DrawElementProto.symbol)
  
  ::SymbolRuleProto* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
void DrawElementProto::set_allocated_symbol(::SymbolRuleProto* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.symbol)
}

// .CaptionRuleProto caption = 5;
bool DrawElementProto::has_caption() const {
  return this != internal_default_instance() && caption_ != NULL;
}
void DrawElementProto::clear_caption() {
  if (GetArenaNoVirtual() == NULL && caption_ != NULL) delete caption_;
  caption_ = NULL;
}
const ::CaptionRuleProto& DrawElementProto::caption() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.caption)
  return caption_ != NULL ? *caption_
                         : *::CaptionRuleProto::internal_default_instance();
}
::CaptionRuleProto* DrawElementProto::mutable_caption() {
  
  if (caption_ == NULL) {
    caption_ = new ::CaptionRuleProto;
  }
  // @@protoc_insertion_point(field_mutable:DrawElementProto.caption)
  return caption_;
}
::CaptionRuleProto* DrawElementProto::release_caption() {
  // @@protoc_insertion_point(field_release:DrawElementProto.caption)
  
  ::CaptionRuleProto* temp = caption_;
  caption_ = NULL;
  return temp;
}
void DrawElementProto::set_allocated_caption(::CaptionRuleProto* caption) {
  delete caption_;
  caption_ = caption;
  if (caption) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.caption)
}

// .CircleRuleProto circle = 6;
bool DrawElementProto::has_circle() const {
  return this != internal_default_instance() && circle_ != NULL;
}
void DrawElementProto::clear_circle() {
  if (GetArenaNoVirtual() == NULL && circle_ != NULL) delete circle_;
  circle_ = NULL;
}
const ::CircleRuleProto& DrawElementProto::circle() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.circle)
  return circle_ != NULL ? *circle_
                         : *::CircleRuleProto::internal_default_instance();
}
::CircleRuleProto* DrawElementProto::mutable_circle() {
  
  if (circle_ == NULL) {
    circle_ = new ::CircleRuleProto;
  }
  // @@protoc_insertion_point(field_mutable:DrawElementProto.circle)
  return circle_;
}
::CircleRuleProto* DrawElementProto::release_circle() {
  // @@protoc_insertion_point(field_release:DrawElementProto.circle)
  
  ::CircleRuleProto* temp = circle_;
  circle_ = NULL;
  return temp;
}
void DrawElementProto::set_allocated_circle(::CircleRuleProto* circle) {
  delete circle_;
  circle_ = circle;
  if (circle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.circle)
}

// .PathTextRuleProto path_text = 7;
bool DrawElementProto::has_path_text() const {
  return this != internal_default_instance() && path_text_ != NULL;
}
void DrawElementProto::clear_path_text() {
  if (GetArenaNoVirtual() == NULL && path_text_ != NULL) delete path_text_;
  path_text_ = NULL;
}
const ::PathTextRuleProto& DrawElementProto::path_text() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.path_text)
  return path_text_ != NULL ? *path_text_
                         : *::PathTextRuleProto::internal_default_instance();
}
::PathTextRuleProto* DrawElementProto::mutable_path_text() {
  
  if (path_text_ == NULL) {
    path_text_ = new ::PathTextRuleProto;
  }
  // @@protoc_insertion_point(field_mutable:DrawElementProto.path_text)
  return path_text_;
}
::PathTextRuleProto* DrawElementProto::release_path_text() {
  // @@protoc_insertion_point(field_release:DrawElementProto.path_text)
  
  ::PathTextRuleProto* temp = path_text_;
  path_text_ = NULL;
  return temp;
}
void DrawElementProto::set_allocated_path_text(::PathTextRuleProto* path_text) {
  delete path_text_;
  path_text_ = path_text;
  if (path_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.path_text)
}

// .ShieldRuleProto shield = 8;
bool DrawElementProto::has_shield() const {
  return this != internal_default_instance() && shield_ != NULL;
}
void DrawElementProto::clear_shield() {
  if (GetArenaNoVirtual() == NULL && shield_ != NULL) delete shield_;
  shield_ = NULL;
}
const ::ShieldRuleProto& DrawElementProto::shield() const {
  // @@protoc_insertion_point(field_get:DrawElementProto.shield)
  return shield_ != NULL ? *shield_
                         : *::ShieldRuleProto::internal_default_instance();
}
::ShieldRuleProto* DrawElementProto::mutable_shield() {
  
  if (shield_ == NULL) {
    shield_ = new ::ShieldRuleProto;
  }
  // @@protoc_insertion_point(field_mutable:DrawElementProto.shield)
  return shield_;
}
::ShieldRuleProto* DrawElementProto::release_shield() {
  // @@protoc_insertion_point(field_release:DrawElementProto.shield)
  
  ::ShieldRuleProto* temp = shield_;
  shield_ = NULL;
  return temp;
}
void DrawElementProto::set_allocated_shield(::ShieldRuleProto* shield) {
  delete shield_;
  shield_ = shield;
  if (shield) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DrawElementProto.shield)
}

// repeated string apply_if = 9;
int DrawElementProto::apply_if_size() const {
  return apply_if_.size();
}
void DrawElementProto::clear_apply_if() {
  apply_if_.Clear();
}
const ::std::string& DrawElementProto::apply_if(int index) const {
  // @@protoc_insertion_point(field_get:DrawElementProto.apply_if)
  return apply_if_.Get(index);
}
::std::string* DrawElementProto::mutable_apply_if(int index) {
  // @@protoc_insertion_point(field_mutable:DrawElementProto.apply_if)
  return apply_if_.Mutable(index);
}
void DrawElementProto::set_apply_if(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DrawElementProto.apply_if)
  apply_if_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DrawElementProto::set_apply_if(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:DrawElementProto.apply_if)
  apply_if_.Mutable(index)->assign(std::move(value));
}
#endif
void DrawElementProto::set_apply_if(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  apply_if_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DrawElementProto.apply_if)
}
void DrawElementProto::set_apply_if(int index, const char* value, size_t size) {
  apply_if_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DrawElementProto.apply_if)
}
::std::string* DrawElementProto::add_apply_if() {
  // @@protoc_insertion_point(field_add_mutable:DrawElementProto.apply_if)
  return apply_if_.Add();
}
void DrawElementProto::add_apply_if(const ::std::string& value) {
  apply_if_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DrawElementProto.apply_if)
}
#if LANG_CXX11
void DrawElementProto::add_apply_if(::std::string&& value) {
  apply_if_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DrawElementProto.apply_if)
}
#endif
void DrawElementProto::add_apply_if(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  apply_if_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DrawElementProto.apply_if)
}
void DrawElementProto::add_apply_if(const char* value, size_t size) {
  apply_if_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DrawElementProto.apply_if)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DrawElementProto::apply_if() const {
  // @@protoc_insertion_point(field_list:DrawElementProto.apply_if)
  return apply_if_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DrawElementProto::mutable_apply_if() {
  // @@protoc_insertion_point(field_mutable_list:DrawElementProto.apply_if)
  return &apply_if_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassifElementProto::kNameFieldNumber;
const int ClassifElementProto::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassifElementProto::ClassifElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassifElementProto)
}
ClassifElementProto::ClassifElementProto(const ClassifElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      element_(from.element_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:ClassifElementProto)
}

void ClassifElementProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClassifElementProto::~ClassifElementProto() {
  // @@protoc_insertion_point(destructor:ClassifElementProto)
  SharedDtor();
}

void ClassifElementProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClassifElementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClassifElementProto& ClassifElementProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClassifElementProto* ClassifElementProto::New(::google::protobuf::Arena* arena) const {
  ClassifElementProto* n = new ClassifElementProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClassifElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassifElementProto)
  element_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClassifElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClassifElementProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ClassifElementProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DrawElementProto element = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClassifElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClassifElementProto)
  return false;
#undef DO_
}

void ClassifElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClassifElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ClassifElementProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .DrawElementProto element = 2;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ClassifElementProto)
}

size_t ClassifElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassifElementProto)
  size_t total_size = 0;

  // repeated .DrawElementProto element = 2;
  {
    unsigned int count = this->element_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassifElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClassifElementProto*>(&from));
}

void ClassifElementProto::MergeFrom(const ClassifElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassifElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ClassifElementProto::CopyFrom(const ClassifElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassifElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifElementProto::IsInitialized() const {
  return true;
}

void ClassifElementProto::Swap(ClassifElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassifElementProto::InternalSwap(ClassifElementProto* other) {
  element_.InternalSwap(&other->element_);
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClassifElementProto::GetTypeName() const {
  return "ClassifElementProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassifElementProto

// string name = 1;
void ClassifElementProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClassifElementProto::name() const {
  // @@protoc_insertion_point(field_get:ClassifElementProto.name)
  return name_.GetNoArena();
}
void ClassifElementProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClassifElementProto.name)
}
#if LANG_CXX11
void ClassifElementProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClassifElementProto.name)
}
#endif
void ClassifElementProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClassifElementProto.name)
}
void ClassifElementProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClassifElementProto.name)
}
::std::string* ClassifElementProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ClassifElementProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClassifElementProto::release_name() {
  // @@protoc_insertion_point(field_release:ClassifElementProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClassifElementProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ClassifElementProto.name)
}

// repeated .DrawElementProto element = 2;
int ClassifElementProto::element_size() const {
  return element_.size();
}
void ClassifElementProto::clear_element() {
  element_.Clear();
}
const ::DrawElementProto& ClassifElementProto::element(int index) const {
  // @@protoc_insertion_point(field_get:ClassifElementProto.element)
  return element_.Get(index);
}
::DrawElementProto* ClassifElementProto::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:ClassifElementProto.element)
  return element_.Mutable(index);
}
::DrawElementProto* ClassifElementProto::add_element() {
  // @@protoc_insertion_point(field_add:ClassifElementProto.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::DrawElementProto >*
ClassifElementProto::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:ClassifElementProto.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::DrawElementProto >&
ClassifElementProto::element() const {
  // @@protoc_insertion_point(field_list:ClassifElementProto.element)
  return element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColorElementProto::kNameFieldNumber;
const int ColorElementProto::kColorFieldNumber;
const int ColorElementProto::kXFieldNumber;
const int ColorElementProto::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColorElementProto::ColorElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColorElementProto)
}
ColorElementProto::ColorElementProto(const ColorElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&color_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ColorElementProto)
}

void ColorElementProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&color_) + sizeof(y_));
  _cached_size_ = 0;
}

ColorElementProto::~ColorElementProto() {
  // @@protoc_insertion_point(destructor:ColorElementProto)
  SharedDtor();
}

void ColorElementProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColorElementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ColorElementProto& ColorElementProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

ColorElementProto* ColorElementProto::New(::google::protobuf::Arena* arena) const {
  ColorElementProto* n = new ColorElementProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorElementProto)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&color_) + sizeof(y_));
}

bool ColorElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ColorElementProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ColorElementProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColorElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColorElementProto)
  return false;
#undef DO_
}

void ColorElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColorElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ColorElementProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:ColorElementProto)
}

size_t ColorElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorElementProto)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColorElementProto*>(&from));
}

void ColorElementProto::MergeFrom(const ColorElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColorElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void ColorElementProto::CopyFrom(const ColorElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorElementProto::IsInitialized() const {
  return true;
}

void ColorElementProto::Swap(ColorElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorElementProto::InternalSwap(ColorElementProto* other) {
  name_.Swap(&other->name_);
  std::swap(color_, other->color_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ColorElementProto::GetTypeName() const {
  return "ColorElementProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorElementProto

// string name = 1;
void ColorElementProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ColorElementProto::name() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.name)
  return name_.GetNoArena();
}
void ColorElementProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ColorElementProto.name)
}
#if LANG_CXX11
void ColorElementProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ColorElementProto.name)
}
#endif
void ColorElementProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ColorElementProto.name)
}
void ColorElementProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ColorElementProto.name)
}
::std::string* ColorElementProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ColorElementProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColorElementProto::release_name() {
  // @@protoc_insertion_point(field_release:ColorElementProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColorElementProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ColorElementProto.name)
}

// uint32 color = 2;
void ColorElementProto::clear_color() {
  color_ = 0u;
}
::google::protobuf::uint32 ColorElementProto::color() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.color)
  return color_;
}
void ColorElementProto::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:ColorElementProto.color)
}

// float x = 3;
void ColorElementProto::clear_x() {
  x_ = 0;
}
float ColorElementProto::x() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.x)
  return x_;
}
void ColorElementProto::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ColorElementProto.x)
}

// float y = 4;
void ColorElementProto::clear_y() {
  y_ = 0;
}
float ColorElementProto::y() const {
  // @@protoc_insertion_point(field_get:ColorElementProto.y)
  return y_;
}
void ColorElementProto::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ColorElementProto.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColorsElementProto::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColorsElementProto::ColorsElementProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColorsElementProto)
}
ColorsElementProto::ColorsElementProto(const ColorsElementProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColorsElementProto)
}

void ColorsElementProto::SharedCtor() {
  _cached_size_ = 0;
}

ColorsElementProto::~ColorsElementProto() {
  // @@protoc_insertion_point(destructor:ColorsElementProto)
  SharedDtor();
}

void ColorsElementProto::SharedDtor() {
}

void ColorsElementProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ColorsElementProto& ColorsElementProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

ColorsElementProto* ColorsElementProto::New(::google::protobuf::Arena* arena) const {
  ColorsElementProto* n = new ColorsElementProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorsElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorsElementProto)
  value_.Clear();
}

bool ColorsElementProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ColorsElementProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ColorElementProto value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColorsElementProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColorsElementProto)
  return false;
#undef DO_
}

void ColorsElementProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColorsElementProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ColorElementProto value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ColorsElementProto)
}

size_t ColorsElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorsElementProto)
  size_t total_size = 0;

  // repeated .ColorElementProto value = 1;
  {
    unsigned int count = this->value_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorsElementProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColorsElementProto*>(&from));
}

void ColorsElementProto::MergeFrom(const ColorsElementProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ColorsElementProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void ColorsElementProto::CopyFrom(const ColorsElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorsElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorsElementProto::IsInitialized() const {
  return true;
}

void ColorsElementProto::Swap(ColorsElementProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorsElementProto::InternalSwap(ColorsElementProto* other) {
  value_.InternalSwap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ColorsElementProto::GetTypeName() const {
  return "ColorsElementProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorsElementProto

// repeated .ColorElementProto value = 1;
int ColorsElementProto::value_size() const {
  return value_.size();
}
void ColorsElementProto::clear_value() {
  value_.Clear();
}
const ::ColorElementProto& ColorsElementProto::value(int index) const {
  // @@protoc_insertion_point(field_get:ColorsElementProto.value)
  return value_.Get(index);
}
::ColorElementProto* ColorsElementProto::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:ColorsElementProto.value)
  return value_.Mutable(index);
}
::ColorElementProto* ColorsElementProto::add_value() {
  // @@protoc_insertion_point(field_add:ColorsElementProto.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::ColorElementProto >*
ColorsElementProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:ColorsElementProto.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::ColorElementProto >&
ColorsElementProto::value() const {
  // @@protoc_insertion_point(field_list:ColorsElementProto.value)
  return value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerProto::kContFieldNumber;
const int ContainerProto::kColorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerProto::ContainerProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContainerProto)
}
ContainerProto::ContainerProto(const ContainerProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      cont_(from.cont_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_colors()) {
    colors_ = new ::ColorsElementProto(*from.colors_);
  } else {
    colors_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ContainerProto)
}

void ContainerProto::SharedCtor() {
  colors_ = NULL;
  _cached_size_ = 0;
}

ContainerProto::~ContainerProto() {
  // @@protoc_insertion_point(destructor:ContainerProto)
  SharedDtor();
}

void ContainerProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete colors_;
  }
}

void ContainerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContainerProto& ContainerProto::default_instance() {
  protobuf_indexer_2fdrules_5fstruct_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContainerProto* ContainerProto::New(::google::protobuf::Arena* arena) const {
  ContainerProto* n = new ContainerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContainerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ContainerProto)
  cont_.Clear();
  if (GetArenaNoVirtual() == NULL && colors_ != NULL) {
    delete colors_;
  }
  colors_ = NULL;
}

bool ContainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContainerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClassifElementProto cont = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cont()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ColorsElementProto colors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContainerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContainerProto)
  return false;
#undef DO_
}

void ContainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContainerProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ClassifElementProto cont = 1;
  for (unsigned int i = 0, n = this->cont_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cont(i), output);
  }

  // .ColorsElementProto colors = 2;
  if (this->has_colors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->colors_, output);
  }

  // @@protoc_insertion_point(serialize_end:ContainerProto)
}

size_t ContainerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContainerProto)
  size_t total_size = 0;

  // repeated .ClassifElementProto cont = 1;
  {
    unsigned int count = this->cont_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cont(i));
    }
  }

  // .ColorsElementProto colors = 2;
  if (this->has_colors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->colors_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContainerProto*>(&from));
}

void ContainerProto::MergeFrom(const ContainerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContainerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cont_.MergeFrom(from.cont_);
  if (from.has_colors()) {
    mutable_colors()->::ColorsElementProto::MergeFrom(from.colors());
  }
}

void ContainerProto::CopyFrom(const ContainerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerProto::IsInitialized() const {
  return true;
}

void ContainerProto::Swap(ContainerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerProto::InternalSwap(ContainerProto* other) {
  cont_.InternalSwap(&other->cont_);
  std::swap(colors_, other->colors_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ContainerProto::GetTypeName() const {
  return "ContainerProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContainerProto

// repeated .ClassifElementProto cont = 1;
int ContainerProto::cont_size() const {
  return cont_.size();
}
void ContainerProto::clear_cont() {
  cont_.Clear();
}
const ::ClassifElementProto& ContainerProto::cont(int index) const {
  // @@protoc_insertion_point(field_get:ContainerProto.cont)
  return cont_.Get(index);
}
::ClassifElementProto* ContainerProto::mutable_cont(int index) {
  // @@protoc_insertion_point(field_mutable:ContainerProto.cont)
  return cont_.Mutable(index);
}
::ClassifElementProto* ContainerProto::add_cont() {
  // @@protoc_insertion_point(field_add:ContainerProto.cont)
  return cont_.Add();
}
::google::protobuf::RepeatedPtrField< ::ClassifElementProto >*
ContainerProto::mutable_cont() {
  // @@protoc_insertion_point(field_mutable_list:ContainerProto.cont)
  return &cont_;
}
const ::google::protobuf::RepeatedPtrField< ::ClassifElementProto >&
ContainerProto::cont() const {
  // @@protoc_insertion_point(field_list:ContainerProto.cont)
  return cont_;
}

// .ColorsElementProto colors = 2;
bool ContainerProto::has_colors() const {
  return this != internal_default_instance() && colors_ != NULL;
}
void ContainerProto::clear_colors() {
  if (GetArenaNoVirtual() == NULL && colors_ != NULL) delete colors_;
  colors_ = NULL;
}
const ::ColorsElementProto& ContainerProto::colors() const {
  // @@protoc_insertion_point(field_get:ContainerProto.colors)
  return colors_ != NULL ? *colors_
                         : *::ColorsElementProto::internal_default_instance();
}
::ColorsElementProto* ContainerProto::mutable_colors() {
  
  if (colors_ == NULL) {
    colors_ = new ::ColorsElementProto;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProto.colors)
  return colors_;
}
::ColorsElementProto* ContainerProto::release_colors() {
  // @@protoc_insertion_point(field_release:ContainerProto.colors)
  
  ::ColorsElementProto* temp = colors_;
  colors_ = NULL;
  return temp;
}
void ContainerProto::set_allocated_colors(::ColorsElementProto* colors) {
  delete colors_;
  colors_ = colors;
  if (colors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProto.colors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
