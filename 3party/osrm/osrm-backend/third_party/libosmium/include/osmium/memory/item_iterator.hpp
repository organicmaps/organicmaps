#ifndef OSMIUM_ITEM_ITERATOR_HPP
#define OSMIUM_ITEM_ITERATOR_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2015 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cassert>
#include <iterator>
#include <iosfwd>
#include <type_traits>

#include <osmium/memory/item.hpp>
#include <osmium/osm/item_type.hpp>

namespace osmium {

    class Node;
    class Way;
    class Relation;
    class Area;
    class Changeset;
    class OSMObject;
    class OSMEntity;
    class TagList;
    class WayNodeList;
    class RelationMemberList;
    class InnerRing;
    class OuterRing;

    namespace memory {

        namespace detail {

            template <class T>
            inline bool type_is_compatible(osmium::item_type) noexcept {
                return true;
            }

            template <>
            inline bool type_is_compatible<osmium::Node>(osmium::item_type t) noexcept {
                return t == osmium::item_type::node;
            }

            template <>
            inline bool type_is_compatible<osmium::Way>(osmium::item_type t) noexcept {
                return t == osmium::item_type::way;
            }

            template <>
            inline bool type_is_compatible<osmium::Relation>(osmium::item_type t) noexcept {
                return t == osmium::item_type::relation;
            }

            template <>
            inline bool type_is_compatible<osmium::Area>(osmium::item_type t) noexcept {
                return t == osmium::item_type::area;
            }

            template <>
            inline bool type_is_compatible<osmium::Changeset>(osmium::item_type t) noexcept {
                return t == osmium::item_type::changeset;
            }

            template <>
            inline bool type_is_compatible<osmium::OSMObject>(osmium::item_type t) noexcept {
                return t == osmium::item_type::node || t == osmium::item_type::way || t == osmium::item_type::relation || t == osmium::item_type::area;
            }

            template <>
            inline bool type_is_compatible<osmium::OSMEntity>(osmium::item_type t) noexcept {
                return t == osmium::item_type::node || t == osmium::item_type::way || t == osmium::item_type::relation || t == osmium::item_type::area || t == osmium::item_type::changeset;
            }

            template <>
            inline bool type_is_compatible<osmium::TagList>(osmium::item_type t) noexcept {
                return t == osmium::item_type::tag_list;
            }

            template <>
            inline bool type_is_compatible<osmium::WayNodeList>(osmium::item_type t) noexcept {
                return t == osmium::item_type::way_node_list;
            }

            template <>
            inline bool type_is_compatible<osmium::RelationMemberList>(osmium::item_type t) noexcept {
                return t == osmium::item_type::relation_member_list || t == osmium::item_type::relation_member_list_with_full_members;
            }

            template <>
            inline bool type_is_compatible<osmium::OuterRing>(osmium::item_type t) noexcept {
                return t == osmium::item_type::outer_ring;
            }

            template <>
            inline bool type_is_compatible<osmium::InnerRing>(osmium::item_type t) noexcept {
                return t == osmium::item_type::inner_ring;
            }

        } // namespace detail

        template <class TMember>
        class ItemIterator : public std::iterator<std::forward_iterator_tag, TMember> {

            static_assert(std::is_base_of<osmium::memory::Item, TMember>::value, "TMember must derive from osmium::memory::Item");

            // This data_type is either 'unsigned char*' or 'const unsigned char*' depending
            // on whether TMember is const. This allows this class to be used as an iterator and
            // as a const_iterator.
            typedef typename std::conditional<std::is_const<TMember>::value, const unsigned char*, unsigned char*>::type data_type;

            data_type m_data;
            data_type m_end;

            void advance_to_next_item_of_right_type() {
                while (m_data != m_end &&
                       !detail::type_is_compatible<typename std::remove_const<TMember>::type>(reinterpret_cast<const osmium::memory::Item*>(m_data)->type())) {
                    m_data = reinterpret_cast<TMember*>(m_data)->next();
                }
            }

        public:

            ItemIterator() noexcept :
                m_data(nullptr),
                m_end(nullptr) {
            }

            ItemIterator(data_type data, data_type end) :
                m_data(data),
                m_end(end) {
                advance_to_next_item_of_right_type();
            }

            template <class T>
            ItemIterator<T> cast() const {
                return ItemIterator<T>(m_data, m_end);
            }

            ItemIterator<TMember>& operator++() {
                assert(m_data);
                assert(m_data != m_end);
                m_data = reinterpret_cast<TMember*>(m_data)->next();
                advance_to_next_item_of_right_type();
                return *static_cast<ItemIterator<TMember>*>(this);
            }

            /**
             * Like operator++() but will NOT skip items of unwanted
             * types. Do not use this unless you know what you are
             * doing.
             */
            ItemIterator<TMember>& advance_once() {
                assert(m_data);
                assert(m_data != m_end);
                m_data = reinterpret_cast<TMember*>(m_data)->next();
                return *static_cast<ItemIterator<TMember>*>(this);
            }

            ItemIterator<TMember> operator++(int) {
                ItemIterator<TMember> tmp(*this);
                operator++();
                return tmp;
            }

            bool operator==(const ItemIterator<TMember>& rhs) const {
                return m_data == rhs.m_data && m_end == rhs.m_end;
            }

            bool operator!=(const ItemIterator<TMember>& rhs) const {
                return !(*this == rhs);
            }

            unsigned char* data() const {
                assert(m_data);
                return m_data;
            }

            TMember& operator*() const {
                assert(m_data);
                assert(m_data != m_end);
                return *reinterpret_cast<TMember*>(m_data);
            }

            TMember* operator->() const {
                assert(m_data);
                assert(m_data != m_end);
                return reinterpret_cast<TMember*>(m_data);
            }

            explicit operator bool() const {
                return m_data != nullptr;
            }

            template <typename TChar, typename TTraits>
            friend std::basic_ostream<TChar, TTraits>& operator<<(std::basic_ostream<TChar, TTraits>& out, const ItemIterator<TMember>& iter) {
                return out << static_cast<void*>(iter.m_data);
            }

        }; // class ItemIterator

    } // namespace memory

} // namespace osmium

#endif // OSMIUM_ITEM_ITERATOR_HPP
